@page "/private-chat"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text;
@using System.Security.Cryptography
@using SecureChat.Crypto

<h1>Secure Chat</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter username:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" class="btn btn-sm btn-primary ml-md-auto" @onclick="@JoinChat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>Joined as <b>@_username</b></span>
        <button type="button" class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>

    @if (string.IsNullOrEmpty(_error) == false)
    {
        <div class="alert alert-danger mt-4" role="alert">
            <span class="oi oi-warning mr-2" aria-hidden="true"></span>
            <span><b>@_error</b></span>
        </div>
    }

    <div>
        @foreach (var user in _users)
        {
            <div>
                <dl>
                    <dd>Username</dd>
                    <dt>@user.Name</dt>
                    <dd>Public Key</dd>
                    <dt>@user.PublicKey.PrettyPrint()</dt>
                    @if (user.SharedSecret == null)
                    {
                        <button type="button" class="btn btn-sm btn-primary ml-md-auto" @onclick="@(() => Handshake(user))">Establish secure session</button>
                    }
                    else
                    {
                        <dd>Shared Secret</dd>
                        <dt>@user.SharedSecret.PrettyPrint()</dt>
                        <hr />
                        @foreach (var item in user.PrivateMessages)
                        {
                            <div>
                                <div><strong>@(item.Own ? _username : user.Name)</strong></div>
                                <div>@item.Body</div>
                            </div>
                        }

                        <div>
                            <textarea class="input-lg" placeholder="Direct encrypted message..." @bind="@_privateMessage"></textarea><br />
                            <button type="button" class="btn btn-sm btn-primary ml-md-auto" @onclick="@(() => OutgoingPrivateMessage(_privateMessage, user))">Send</button>
                        </div>
                    }
                </dl>
            </div>
        }
    </div>
}

@code {
    private bool _isChatting = false;
    private string _username;
    private string _privateMessage;
    private string _error;

    private List<User> _users = new List<User>();
    private HubConnection _hubConnection;

    private CngKey _key;
    private ECDiffieHellmanPublicKey _publicKey;

    protected override void OnInitialized()
    {
    }

    public async Task JoinChat()
    {
        try
        {
            _error = null;
            _isChatting = true;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7024/chathub")
                .Build();

            _hubConnection.On<string, byte[]>("UserJoined", UserJoined);
            _hubConnection.On<ICollection<User>>("UserList", UserList);
            _hubConnection.On<string, byte[]>("IncomingPrivateMessage", IncomingPrivateMessage);

            using (var alice = new ECDiffieHellmanCng())
            {
                alice.KeyDerivationFunction = ECDiffieHellmanKeyDerivationFunction.Hash;
                alice.HashAlgorithm = CngAlgorithm.Sha256;
                _key = alice.Key;
                _publicKey = alice.PublicKey;
            }

            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync("Join", _username, _publicKey);
        }
        catch (Exception e)
        {
            _error = $"ERROR: {e.Message}";
            _isChatting = false;
        }
    }

    private async Task Handshake(User user)
    {
        using (ECDiffieHellmanCng alice = new ECDiffieHellmanCng(_key))
        {
            var bobKey = CngKey.Import(user.PublicKey, CngKeyBlobFormat.EccPublicBlob);
            user.SharedSecret = alice.DeriveKeyMaterial(bobKey);
        }

        await _hubConnection.SendAsync("Handshake", user.Name, _publicKey);
        await InvokeAsync(StateHasChanged);
    }

    private async Task IncomingHandshake(string senderName)
    {
        var sender = _users.FirstOrDefault(u => u.Name == senderName);
        if (sender == null)
        {
            Console.WriteLine($"ERROR: Received negotiation from unknown user '{senderName}'.");
            return;
        }

        using (ECDiffieHellmanCng alice = new ECDiffieHellmanCng(_key))
        {
            var bobKey = CngKey.Import(sender.PublicKey, CngKeyBlobFormat.EccPublicBlob);
            sender.SharedSecret = alice.DeriveKeyMaterial(bobKey);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OutgoingPrivateMessage(string privateMessage, User user)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(privateMessage) && user.SharedSecret != null)
        {
            var encryptedMessageBytes = await SecureChat.Crypto.Cipher.AesGcmCipher.EncryptAsync(privateMessage, user.SharedSecret);
            await _hubConnection.SendAsync("PrivateMessage", user.Name, encryptedMessageBytes);
            user.PrivateMessages.Add(new Message(privateMessage, true));

            _privateMessage = string.Empty;
        }
    }

    private async Task IncomingPrivateMessage(string from, byte[] encryptedMessageBytes)
    {
        var user = _users.FirstOrDefault(u => u.Name == from);
        if (user == null)
        {
            Console.WriteLine($"ERROR: Received negotiation from unknown user '{from}'.");
            return;
        }

        var privateMessageText = await SecureChat.Crypto.Cipher.AesGcmCipher.DecryptAsync(encryptedMessageBytes, user.SharedSecret);
        user.PrivateMessages.Add(new Message(privateMessageText, false));

        await InvokeAsync(StateHasChanged);
    }

    private async Task UserJoined(string username, byte[] publicKey)
    {
        _users.Add(new User { Name = username, PublicKey = publicKey });
        await InvokeAsync(StateHasChanged);
    }

    private async Task UserList(ICollection<User> users)
    {
        _users = users.Where(u => u.Name != _username).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _users.Clear();
            _isChatting = false;
        }
    }
}
